;; The parser for imp2. It uses cl-yacc.

;; The grammar is:
;;
;; prog -> stmt-list
;; 
;; stmt-list-> stmt
;;           | stmt SEMICOLON stmt-list 
;; 
;; stmt -> assign-stmt
;;       | write-stmt
;;       | writeln-stmt
;;       | if-stmt
;;       | if-else-stmt
;;       | while-stmt
;;       | cmpd-stmt
;;       | empty-stmt
;;
;; cmpd-stmt -> BEGIN stmt-list END
;;
;; empty-stmt -> 
;;
;; assign-stmt -> IDENT ASSIGN expr
;; 
;; if-stmt -> IF expr THEN stmt
;;
;; if-else-stmt -> IF expr THEN stmt ELSE stmt
;;
;; while-stmt -> WHILE expr DO stmt
;;
;; write-stmt -> WRITE LPAREN expr RPAREN
;;             | WRITE LPAREN expr COLOR expr RPAREN
;;
;; writeln-stmt -> WRITELN LPAREN RPAREN
;;               | WRITELN LPAREN expr RPAREN
;;               | WRITELN LPAREN expr COLON expr RPAREN
;;
;; expr -> relational-expr
;;
;; relational-expr -> additive-expr
;;                  | additive-expr LT additive-expr
;;                  | additive-expr LE additive-expr
;;                  | additive-expr GT additive-expr
;;                  | additive-expr GE additive-expr
;;                  | additive-expr EQ additive-expr
;;                  | additive-expr NE additive-expr
;;
;; additive-expr -> multiplicative-expr
;;                | additive-expr PLUS multiplicative-expr
;;                | additive-expr MINUS multiplicative-expr
;; multiplicative-expr -> unary-expr
;;                      | multiplicative-expr TIMES unary-expr
;;                      | multiplicative-expr DIV unary-expr
;;                      | multiplicative-expr MOD unary-expr
;;
;; unary-expr -> primary-expr
;;             | PLUS unary-expr
;;             | MINUS unary-expr
;;
;; primary-expr -> INT_CONST
;;               | IDENT
;;               | LPAREN expr RPAREN

;; Expression structures. 
(defstruct var-expr name)
(defstruct int-const-expr value)
(defstruct unary-expr op rand)
(defstruct binary-expr op left right)
(defstruct arg val width)

;; Statement structures.
(defstruct assign-stmt lval rval)
(defstruct write-stmt arg width)
(defstruct writeln-stmt arg width)
(defstruct nwrite-stmt arglst ln)
(defstruct if-stmt test body)
(defstruct if-else-stmt test if-part else-part)
(defstruct while-stmt test body)
(defstruct for-stmt control lbound ubound body)
(defstruct empty-stmt)
(defstruct cmpd-stmt stmts)
(defstruct program stmts)

;; This function takes an operator (represented by a symbol) as an
;; argument and returns an action function for cl-yacc productions
;; that creates a binary expression with that operator.
(defun binary (op) 
  (lambda (x y z) (make-binary-expr :op op :left x :right z)))

;; This function takes an operator (represented by a symbol) as an
;; argument and returns an action function for cl-yacc productions
;; that creates a unary expression with that operator.
(defun unary (op) 
  (lambda (x y) (make-unary-expr :op op :rand y)))

;; The parser.
(define-parser *prog-parser* 
  ;; Ignore dangling else conflict.
  (:muffle-conflicts (1 0))
  (:start-symbol prog)
  (:terminals (INT-CONST IDENT
	       PLUS MINUS 
	       TIMES DIV MOD
	       LPAREN RPAREN
	       ASSIGN
	       COLON SEMICOLON PERIOD
	       COMMA
               WRITE WRITELN
               FOR TO
	       IF THEN ELSE WHILE DO BEGIN END
	       LT LE GT GE EQ NE))
  (prog
   (stmt-list (lambda (a) (make-program :stmts a))))
  (stmt-list
   (stmt #'list)
   (stmt SEMICOLON stmt-list (lambda (a b c) (cons a c))))
  (stmt
   (assign-stmt #'identity)
   (write-stmt #'identity)
   (writeln-stmt #'identity)
   (if-stmt #'identity)
   (if-else-stmt #'identity)
   (while-stmt #'identity)
   (for-stmt #'identity)
   (cmpd-stmt #'identity)
   (empty-stmt #'identity))
  (cmpd-stmt 
   (BEGIN stmt-list END (lambda (a b c) (make-cmpd-stmt :stmts b))))
  (empty-stmt
   ((lambda () (make-empty-stmt))))
  (assign-stmt
   (IDENT ASSIGN expr 
	  (lambda (a b c) (make-assign-stmt :lval a :rval c))))
  (if-stmt 
   (IF expr THEN stmt 
       (lambda (a b c d) (make-if-stmt :test b :body d))))
  (if-else-stmt 
   (IF expr THEN stmt ELSE stmt 
       (lambda (a b c d e f) (make-if-else-stmt :test b 
						:if-part d
						:else-part f))))
  (while-stmt
   (WHILE expr DO stmt 
	  (lambda (a b c d) (make-while-stmt :test b
					     :body d))))
  (for-stmt
   (FOR IDENT ASSIGN expr TO expr DO stmt
        (lambda (a b c d e f g h) (make-for-stmt :control b
                                                 :lbound d
                                                 :ubound f
                                                 :body h))))
  (write-stmt
   (WRITE LPAREN write-arglst RPAREN 
          (lambda (a b c d) (make-nwrite-stmt :arglst c :ln 0))))
  (writeln-stmt
   (WRITELN LPAREN RPAREN
	    (lambda (a b c) (make-writeln-stmt :arg nil :width nil)))
   (WRITELN LPAREN writeln-arglst RPAREN 
          (lambda (a b c d) (make-nwrite-stmt :arglst c :ln 1))))
  (write-arglst
   (arg #'list)
   (writeln-arglst #'identity))
  (writeln-arglst
   (arg #'list)
   (arg COMMA writeln-arglst (lambda (a b c) (cons a c)))
   (nil))
  (arg
   (expr COLON expr 
         (lambda (a b c) (make-arg :val a :width c)))
   (expr (lambda (a) (make-arg :val a :width nil))))
  (expr 
   (relational-expr #'identity)) 
  (relational-expr
   (additive-expr #'identity)
   (additive-expr LT additive-expr (binary 'LT))
   (additive-expr LE additive-expr (binary 'LE))
   (additive-expr GT additive-expr (binary 'GT))
   (additive-expr GE additive-expr (binary 'GE))
   (additive-expr EQ additive-expr (binary 'EQ))
   (additive-expr NE additive-expr (binary 'NE)))
  (additive-expr
   (multiplicative-expr #'identity)
   (additive-expr PLUS multiplicative-expr (binary 'PLUS))
   (additive-expr MINUS multiplicative-expr (binary 'MINUS)))
  (multiplicative-expr
   (unary-expr #'identity)
   (multiplicative-expr TIMES unary-expr (binary 'TIMES))
   (multiplicative-expr DIV unary-expr (binary 'DIV))
   (multiplicative-expr MOD unary-expr (binary 'MOD)))
  (unary-expr
   (primary-expr #'identity)
   (PLUS unary-expr (lambda (x y) y))
   (MINUS unary-expr (unary 'MINUS)))
  (primary-expr
   (INT-CONST (lambda (a) (make-int-const-expr :value a)))
   (IDENT (lambda (a) (make-var-expr :name a)))
   (LPAREN expr RPAREN (lambda (a b c) b))))
